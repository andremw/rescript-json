// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Json = require("../src/Json.js");
var Zora = require("@dusty-phillips/rescript-zora/lib/js/src/Zora.js");
var Zora$1 = require("zora");

Zora$1.test("decoder tests", (function (t) {
        t.test("should decode a string", (function (t) {
                t.equal(Json.Decode.decodeString(Json.Decode.string, "\"value\""), {
                      TAG: /* Ok */0,
                      _0: "value"
                    }, "Should equal");
                return Zora.done(undefined);
              }));
        t.test("should decode an int", (function (t) {
                t.equal(Json.Decode.decodeString(Json.Decode.$$int, "1"), {
                      TAG: /* Ok */0,
                      _0: 1
                    }, "Should equal");
                return Zora.done(undefined);
              }));
        t.test("should decode an float", (function (t) {
                t.equal(Json.Decode.decodeString(Json.Decode.$$float, "1"), {
                      TAG: /* Ok */0,
                      _0: 1
                    }, "Should equal");
                return Zora.done(undefined);
              }));
        t.test("should decode an bool", (function (t) {
                t.equal(Json.Decode.decodeString(Json.Decode.bool, "true"), {
                      TAG: /* Ok */0,
                      _0: true
                    }, "Should equal");
                return Zora.done(undefined);
              }));
        t.test("should decode null", (function (t) {
                t.equal(Json.Decode.decodeString(Json.Decode.$$null(1), "null"), {
                      TAG: /* Ok */0,
                      _0: 1
                    }, "Should equal");
                return Zora.done(undefined);
              }));
        t.test("should decode empty array", (function (t) {
                t.equal(Json.Decode.decodeString(Json.Decode.array(Json.Decode.$$int), "[]"), {
                      TAG: /* Ok */0,
                      _0: []
                    }, "Should equal");
                return Zora.done(undefined);
              }));
        t.test("should decode array", (function (t) {
                t.equal(Json.Decode.decodeString(Json.Decode.array(Json.Decode.$$int), "[1, 2, 3]"), {
                      TAG: /* Ok */0,
                      _0: [
                        1,
                        2,
                        3
                      ]
                    }, "Should equal");
                return Zora.done(undefined);
              }));
        t.test("should decode array", (function (t) {
                var res = {};
                res["a"] = 1;
                res["b"] = 2;
                t.equal(Json.Decode.decodeString(Json.Decode.dict(Json.Decode.$$int), "{ \"a\": 1, \"b\": 2 }"), {
                      TAG: /* Ok */0,
                      _0: res
                    }, "Should equal");
                return Zora.done(undefined);
              }));
        t.test("should decode empty key/value pair", (function (t) {
                t.equal(Json.Decode.decodeString(Json.Decode.keyValuePairs(Json.Decode.$$int), "{}"), {
                      TAG: /* Ok */0,
                      _0: []
                    }, "Should equal");
                return Zora.done(undefined);
              }));
        t.test("should decode empty key/value pair", (function (t) {
                t.equal(Json.Decode.decodeString(Json.Decode.keyValuePairs(Json.Decode.$$int), "{ \"a\": 1, \"b\": 2 }"), {
                      TAG: /* Ok */0,
                      _0: [
                        [
                          "a",
                          1
                        ],
                        [
                          "b",
                          2
                        ]
                      ]
                    }, "Should equal");
                return Zora.done(undefined);
              }));
        t.test("should decode field", (function (t) {
                t.equal(Json.Decode.decodeString(Json.Decode.field("a", Json.Decode.$$int), "{ \"a\": 1, \"b\": 2 }"), {
                      TAG: /* Ok */0,
                      _0: 1
                    }, "Should equal");
                return Zora.done(undefined);
              }));
        t.test("should decode field at topLevle", (function (t) {
                t.equal(Json.Decode.decodeString(Json.Decode.at("b", [], Json.Decode.$$int), "{ \"a\": { \"c\": \"test\" }, \"b\": 2 }"), {
                      TAG: /* Ok */0,
                      _0: 2
                    }, "Should equal");
                return Zora.done(undefined);
              }));
        t.test("should decode field at", (function (t) {
                t.equal(Json.Decode.decodeString(Json.Decode.at("a", ["c"], Json.Decode.string), "{ \"a\": { \"c\": \"test\" }, \"b\": 2 }"), {
                      TAG: /* Ok */0,
                      _0: "test"
                    }, "Should equal");
                return Zora.done(undefined);
              }));
        t.test("should decode array at index", (function (t) {
                t.equal(Json.Decode.decodeString(Json.Decode.index(0, Json.Decode.$$int), "[1, 2, 3]"), {
                      TAG: /* Ok */0,
                      _0: 1
                    }, "Should equal");
                return Zora.done(undefined);
              }));
        t.test("should decode optional bool valid", (function (t) {
                t.equal(Json.Decode.decodeString(Json.Decode.option(Json.Decode.bool), "false"), {
                      TAG: /* Ok */0,
                      _0: false
                    }, "Should equal");
                return Zora.done(undefined);
              }));
        t.test("should decode optional bool invalid", (function (t) {
                t.equal(Json.Decode.decodeString(Json.Decode.option(Json.Decode.bool), "1"), {
                      TAG: /* Ok */0,
                      _0: undefined
                    }, "Should equal");
                return Zora.done(undefined);
              }));
        t.test("should decode oneOf first", (function (t) {
                t.equal(Json.Decode.decodeString(Json.Decode.oneOf(Json.Decode.$$float, []), "1"), {
                      TAG: /* Ok */0,
                      _0: 1
                    }, "Should equal");
                return Zora.done(undefined);
              }));
        t.test("should decode oneOf second", (function (t) {
                t.equal(Json.Decode.decodeString(Json.Decode.oneOf(Json.Decode.field("a", Json.Decode.$$int), [Json.Decode.field("b", Json.Decode.$$int)]), "{ \"b\": 1 }"), {
                      TAG: /* Ok */0,
                      _0: 1
                    }, "Should equal");
                return Zora.done(undefined);
              }));
        t.test("should decode oneOf third", (function (t) {
                t.equal(Json.Decode.decodeString(Json.Decode.oneOf(Json.Decode.field("a", Json.Decode.$$int), [
                              Json.Decode.field("c", Json.Decode.$$int),
                              Json.Decode.field("b", Json.Decode.$$int)
                            ]), "{ \"b\": 1 }"), {
                      TAG: /* Ok */0,
                      _0: 1
                    }, "Should equal");
                return Zora.done(undefined);
              }));
        t.test("should decode value", (function (t) {
                var resValue = Json.Decode.decodeString(Json.Decode.value, "1");
                if (resValue.TAG === /* Ok */0) {
                  t.equal(Json.Decode.decodeValue(Json.Decode.$$float, resValue._0), {
                        TAG: /* Ok */0,
                        _0: 1
                      }, "Should equal");
                } else {
                  t.fail("Shouldn't have failed");
                }
                return Zora.done(undefined);
              }));
        t.test("should be able to map", (function (t) {
                t.equal(Json.Decode.decodeString(Json.Decode.map(Json.Decode.$$int, (function (i) {
                                return i + 1 | 0;
                              })), "1"), {
                      TAG: /* Ok */0,
                      _0: 2
                    }, "Should equal");
                return Zora.done(undefined);
              }));
        t.test("should be able to map2", (function (t) {
                t.equal(Json.Decode.decodeString(Json.Decode.map2(Json.Decode.field("a", Json.Decode.$$int), Json.Decode.field("b", Json.Decode.$$int), (function (a, b) {
                                return a + b | 0;
                              })), "{ \"a\": 1, \"b\": 1 }"), {
                      TAG: /* Ok */0,
                      _0: 2
                    }, "Should equal");
                return Zora.done(undefined);
              }));
        t.test("should decode an nullable valid", (function (t) {
                t.equal(Json.Decode.decodeString(Json.Decode.nullable(Json.Decode.$$float), "1"), {
                      TAG: /* Ok */0,
                      _0: 1
                    }, "Should equal");
                return Zora.done(undefined);
              }));
        t.test("should decode an nullable null", (function (t) {
                t.equal(Json.Decode.decodeString(Json.Decode.nullable(Json.Decode.$$float), "null"), {
                      TAG: /* Ok */0,
                      _0: undefined
                    }, "Should equal");
                return Zora.done(undefined);
              }));
        t.test("should not decode an nullable invalid", (function (t) {
                Zora.resultError(t, Json.Decode.decodeString(Json.Decode.nullable(Json.Decode.$$float), "a"), "Should be error");
                return Zora.done(undefined);
              }));
        t.test("should succeed", (function (t) {
                t.equal(Json.Decode.decodeString(Json.Decode.succeed(true), "\"value\""), {
                      TAG: /* Ok */0,
                      _0: true
                    }, "Should equal");
                return Zora.done(undefined);
              }));
        t.test("should fail", (function (t) {
                Zora.resultError(t, Json.Decode.decodeString(Json.Decode.fail("bad"), "\"value\""), "Should be error");
                return Zora.done(undefined);
              }));
        return Zora.done(undefined);
      }));

/*  Not a pure module */
